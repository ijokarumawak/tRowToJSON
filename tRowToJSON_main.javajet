<%@ jet 
  imports="
      java.util.List
      java.util.Map
      org.talend.core.model.metadata.IMetadataColumn
      org.talend.core.model.metadata.IMetadataTable
      org.talend.core.model.process.EConnectionType
      org.talend.core.model.process.ElementParameterParser
      org.talend.core.model.process.IConnection
      org.talend.core.model.process.IConnectionCategory
      org.talend.core.model.process.INode
      org.talend.designer.codegen.config.CodeGeneratorArgument
      org.talend.core.model.metadata.types.JavaTypesManager
  "
%>

<%
/**
 * Copyright 2012 Koji Kawamura
 *
 * This product includes software developed at
 * atWare, Inc. (http://www.atware.co.jp/).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
%>

<%
  CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
  INode node = (INode)codeGenArgument.getArgument();
  String cid = node.getUniqueName();
  List<Map<String, String>> jsonFields = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__JSON_FIELDS__");
  List<Map<String, String>> excludeColumns = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__EXCLUDE_COLUMNS__");
  String jsonColumn = ElementParameterParser.getValue(node, "__JSON_COLUMN__");
  boolean useAllColumn = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__USE_ALL_COLUMN__"));
  IConnection inMainCon = null;
  List<? extends IConnection> connsIn = node.getIncomingConnections(EConnectionType.FLOW_MAIN);
  
  if (connsIn == null || connsIn.size() == 0 ){
    return "";
  } else{
    inMainCon = connsIn.get(0);
  }   
  IConnection outConn = null;
  List< ? extends IConnection> outConns = node.getOutgoingSortedConnections();
  
  if (outConns == null || outConns.size() == 0 ){
    return "";
  } else{
  	for(int i=0; i<outConns.size(); i++){
  		IConnection connTemp = outConns.get(i);
	    if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	    	outConn = connTemp;
	    	break;
	    }
  	}
  } 
  
  String outconnName = outConn.getName();
  String preconnName = inMainCon.getName(); 
  String rejectConnName = null; 
  
  IMetadataTable preMetadata = inMainCon.getMetadataTable(); 
  List<IMetadataColumn> preColumns = preMetadata.getListColumns();   
  List<IMetadataTable> metadatas = node.getMetadataList();
  IMetadataTable metadata = metadatas.get(0);
  List<IMetadataColumn> columns = metadata.getListColumns();
  
  %>
  <%=outconnName %> = new <%=outconnName %>Struct();
  <%  
  
    for (IMetadataColumn col : columns){//col:columns  
      String outLabel = col.getLabel();
      String outPattern = col.getPattern();
      if(jsonColumn.equals(outLabel)){ %>
		org.codehaus.jettison.json.JSONObject json_<%=cid %> = new org.codehaus.jettison.json.JSONObject();
		<%
		if(useAllColumn) {
		  preCol: for(IMetadataColumn preColumn : preColumns) {
		    for(Map<String, String> excludeColumn : excludeColumns) {
		      if(excludeColumn.get("EXCLUDE_COLUMN").equals(preColumn.getLabel())) {
		         continue preCol;
		      }
		    }
          %>
            json_<%=cid %>.put("<%=preColumn.getLabel() %>", <%=preconnName %>.<%=preColumn.getLabel() %>);
          <%
		  }
		  
		} else {
          // manual column mapping
          for(Map<String, String> jsonField : jsonFields) {
              String jsonFieldName = (String)jsonField.get("JSON_FIELD");
              String inputColumn = (String)jsonField.get("INPUT_COLUMN");
              if(jsonFieldName == null || jsonFieldName.length() == 0) {
                  jsonFieldName = "\"" + inputColumn + "\"";
              }
          %>
              // {JSON_FIELD=, INPUT_COLUMN=}
              json_<%=cid %>.put(<%=jsonFieldName %>, <%=preconnName %>.<%=inputColumn %>);
          <%
          }
        }
        %>
        <%=outconnName %>.<%=outLabel %> = json_<%=cid %>.toString();
      <% } else { %>
        <%=outconnName %>.<%=outLabel %> = <%=preconnName %>.<%=outLabel %>;
      <% } %>
  <%
    }//col:columns
  %>
  
nb_line_<%=cid%>++;
  